package assignment2.dsa;
import java.io.IOException;

import java.util.Scanner;

public class Driver {

	public static void main(String[] args) throws IOException{
		int noofFloor;
		int[]floors;
		
		Scanner sc = new Scanner (System.in);
		System.out.println("Enter the total no of floors in the building : ");
		
		noofFloor = sc.nextInt();
        floors = new int[noofFloor];
        for (int i = 0; i < noofFloor; i++) 
        {
        	System.out.println("Enter the floor size given on day : " + (i + 1));
            int floorSize = sc.nextInt();
        }
        System.out.println();
        
        //Implement the construction of floors 
        Service service = new Service();
        service.printConstructionTable(floors);
        
        
        
        
     }
}

package assignment2.dsa;

import java.util.Queue;

Import.java.util.Queueimplimentation.java;

public class Service {

	public void printConstructionTable(int floor[]) {
		Queue<Integer> queue = new Queue<>(java.util.Collections.reverseOrder)));
		int max = floor.length;
/*2.	
 *              *Logic*
 *      1. add the floor size received everyday into queue
 *      2. check the queue for the required floor size and pop till all the requirements are met
 *              
 */
		System .out.println ("the order of construction is as Follows");
		for (int i = 0; i <floor.length; i++) {
			System .out.println("Day: "+(i+1));
			queue.add(floor[i]);
			while (!queue.isEmpty()&& queue.peek() == max) {
				System .out.print(queue.poll() +"");
				max--;
				
			}
			System .out.println();
			
		}
		
	}

}
package assignment2.dsa;

import java.util.Queue;

importjava.util.Collections;

public class Queueimplementation {

	public static void main(String[] args) {
		
		Queue<Integer> queue = new Queue <>();
		queue.add(12);
		queue.add(1);
		queue.add(2);
		queue.add(21);
		queue.add(121);
		  
		while (!queue.isEmpty()){
			System.out.print(queue.poll()+ " ");
	
			
		}
		
		
		
	}

}
